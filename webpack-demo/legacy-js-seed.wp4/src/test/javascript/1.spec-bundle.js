(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[1],[function(e,t){e.exports=jQuery},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:true});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();var i=r(0);var a=l(i);var o=r(5);var s=l(o);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var d=function(){function t(){u(this,t);this.errorMsgPrefix="Error code =  "}n(t,[{key:"getCrewsForUser",value:function t(r){var n=this;if(!r){throw new Error("userId is mandatory")}var i="/maintenix/rest/crews";var o={userId:r};return new e(function(e,t){a.default.ajax({url:i,type:"GET",data:o,success:function t(r,n,i){e(r)},error:function e(r,i,a){var o=n.errorMsgPrefix+r.status;t(o)}})})}},{key:"getDefaultStartAndEndDates",value:function t(r){var n=this;if(!r){throw new Error("userId is mandatory")}var i="/maintenix/rest/datetime/getCurrent";var o={userId:r};return new e(function(e,t){a.default.ajax({url:i,type:"GET",data:o,success:function r(i,a,o){var s=new Date(i.startYear,i.startMonth-1,i.startDayOfMonth,i.startHourInDay,i.startMinute);var l=new Date(i.endYear,i.endMonth-1,i.endDayOfMonth,i.endHourInDay,i.endMinute);var u={};u.startDate=n.formatDate(s);u.startTime=n.formatTime(s);u.startTimeZone=i.startTimezone;try{n.validateDateFormat(u.startDate)}catch(e){t("default startDate failed validation: "+e.message)}try{n.validateTimeFormat(u.startTime)}catch(e){t("default startTime failed validation: "+e.message)}u.endDate=n.formatDate(l);u.endTime=n.formatTime(l);u.endTimeZone=i.endTimezone;try{n.validateDateFormat(u.endDate)}catch(e){t("default endDate failed validation: "+e.message)}try{n.validateTimeFormat(u.endTime)}catch(e){t("default endTime failed validation: "+e.message)}e(u)},error:function e(r,i,a){var o=n.errorMsgPrefix+r.status;t(o)}})})}},{key:"performSearch",value:function t(r){var n=this;return new e(function(e,t){var i=r.showCompleteTasks==true?false:true;var o={onlyWorkscoped:true,onlyContainingLabour:true,assignedToCrewId:r.crewId,minScheduledStartDateTime:r.startDateTime,maxScheduledStartDateTime:r.endDateTime,excludeCompleted:i};var s="/maintenix/rest/tasks";a.default.ajax({url:s,data:o,type:"GET",success:function t(r,n,i){e(r)},error:function e(r,i,a){var o=n.errorMsgPrefix+r.status;t(o)}})})}},{key:"updateScheduledHours",value:function e(t,r,n){var i=this;var o={scheduledHours:n};a.default.ajax({url:"/maintenix/rest/tasks/"+t+"/labours/"+r,type:"PUT",contentType:"application/json",data:JSON.stringify(o),error:function e(t,r,n){var a=i.errorMsgPrefix+t.status;new Error(a)}})}},{key:"updateActualHours",value:function e(t,r,n){var i=this;var o={actualHours:n};a.default.ajax({url:"/maintenix/rest/tasks/"+t+"/labours/"+r,type:"PUT",contentType:"application/json",data:JSON.stringify(o),error:function e(t,r,n){var a=i.errorMsgPrefix+t.status;new Error(a)}})}},{key:"validateDateFormat",value:function e(t){if(!t){throw new Error("dateStr is mandatory.")}if(typeof t!=="string"){throw new Error("dateStr is not a string")}var r=/^(([0-9])|([0-2][0-9])|([3][0-1]))\-(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\-\d{4}$/;var n=t.match(r);if(n==null){throw new Error("dateStr has invalid format.")}return true}},{key:"validateTimeFormat",value:function e(t){if(!t){throw new Error("timeStr is mandatory.")}if(typeof t!=="string"){throw new Error("timeStr is not a string.")}var r=/^$|^(([01][0-9])|(2[0-3])):[0-5][0-9]$/;var n=t.match(r);if(n==null){throw new Error("timeStr has invalid format.")}return true}},{key:"addHours",value:function e(t,r){return new Date(t.getTime()+r*60*60*1e3)}},{key:"formatDate",value:function e(t){var r=(t.getDate()<10?"0":"")+t.getDate()+"-"+this.getMonthShortStr(t.getMonth()+1)+"-"+t.getFullYear();return r}},{key:"formatTime",value:function e(t){var r=(t.getHours()<10?"0":"")+t.getHours()+":"+(t.getMinutes()<10?"0":"")+t.getMinutes();return r}},{key:"getMonthShortStr",value:function e(t){if(t===1)return"JAN";if(t===2)return"FEB";if(t===3)return"MAR";if(t===4)return"APR";if(t===5)return"MAY";if(t===6)return"JUN";if(t===7)return"JUL";if(t===8)return"AUG";if(t===9)return"SEP";if(t===10)return"OCT";if(t===11)return"NOV";if(t===12)return"DEC";return""}}]);return t}();t.default=d}).call(this,r(2))},function(e,t,r){"use strict";e.exports=r(17).Promise},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:true});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();var i=r(0);var a=o(i);function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var l=function(){function t(){s(this,t)}n(t,null,[{key:"sortTaskDefinitions",value:function e(t){if(!t||!(t instanceof Array)){throw new Error("taskDefinitions expected to be an Array")}return t.sort(function(e,t){var r=e.code>t.code?1:e.code<t.code?-1:0;if(r==0){r=e.configSlotCode>t.configSlotCode?1:e.configSlotCode<t.configSlotCode?-1:0}if(r==0){r=e.name>t.name?1:e.name<t.name?-1:0}return r})}},{key:"getFollowOnTaskDefinitions",value:function t(r){var n=this;return new e(function(e,t){return a.default.ajax({type:"GET",url:r,success:function t(r){var i=n.sortTaskDefinitions(r);e(i)},error:function t(r){e([])}})})}}]);return t}();t.default=l}).call(this,r(2))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});function n(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var i=function e(t){n(this,e);if(!t||!(t instanceof Array)){throw new Error("The response data suppose to be in array form")}this.data=t;this.name="followOnTaskDefnSearch";this.limit=50;this.minLength=1};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();function i(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var a=function(){function e(){i(this,e)}n(e,null,[{key:"addHours",value:function e(t,r){return new Date(t.getTime()+r*60*60*1e3)}},{key:"formatDate",value:function e(t){var r=(t.getDate()<10?"0":"")+t.getDate()+"-"+this.getMonthShortStr(t.getMonth()+1)+"-"+t.getFullYear();return r}},{key:"formatTime",value:function e(t){var r=(t.getHours()<10?"0":"")+t.getHours()+":"+(t.getMinutes()<10?"0":"")+t.getMinutes();return r}},{key:"convertTimeToDecimal",value:function e(t){var r=t.split(/[.:]/);var n=parseInt(r[0],10);var i=r[1]?parseInt(r[1],10):0;return n+i/60}},{key:"getMonthShortStr",value:function e(t){if(t===1)return"JAN";else if(t===2)return"FEB";else if(t===3)return"MAR";else if(t===4)return"APR";else if(t===5)return"MAY";else if(t===6)return"JUN";else if(t===7)return"JUL";else if(t===8)return"AUG";else if(t===9)return"SEP";else if(t===10)return"OCT";else if(t===11)return"NOV";else if(t===12)return"DEC";else return""}}]);return e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=t.Add=function e(t,r){return t+r};var i=t.Subtract=function e(t,r){return t-r};var a=t.Multiply=function e(t,r){return t*r}},function(e,t,r){"use strict";var n=r(6);describe("[Dummy]",function(){it("[Add] should add two numbers together and return the result",function(){expect((0,n.Add)(1,2)).toBe(3)});it("[Subtract] should subtract second param from first and return the result",function(){expect((0,n.Subtract)(1,2)).toBe(-1)});it("[Multiply] should multiply two numbers and return the result",function(){expect((0,n.Multiply)(1,2)).toBe(2)})})},function(e,t,r){"use strict";(function(e){var t=r(3);var n=i(t);function i(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchService followOnTask/followOnTaskDefinitionSearchService.js",function(){var t=void 0;var r="https://www.google.com";var i=[{code:3,configSlotCode:3,name:"Third"},{code:2,configSlotCode:2,name:"Second"},{code:1,configSlotCode:1,name:"First"}];beforeAll(function(){this.service=n.default});it("Sorts task definitions",function(){var e=this.service.sortTaskDefinitions(i);expect(e[0].code).toBe(1);expect(e[1].code).toBe(2);expect(e[2].code).toBe(3)});it("Fetches task definitions with error for invalid response",function(){jasmine.Ajax.install();spyOn(e,"ajax").and.callFake(function(e){var t={};return e.success(t)});expect(function(){this.service.getFollowOnTaskDefinitions(r)}).toThrow();jasmine.Ajax.uninstall()});it("Fetches task definitions successfully",function(){jasmine.Ajax.install();spyOn(e,"ajax").and.callFake(function(e){return e.success(i)});this.service.getFollowOnTaskDefinitions(r).then(function(e){expect(e).toEqual(i)});jasmine.Ajax.uninstall()})})}).call(this,r(0))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();var i=r(0);var a=d(i);var o=r(4);var s=d(o);var l=r(3);var u=d(l);function d(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var f=function(){function e(t,r,n,i,o){c(this,e);var s=this;this.notFoundMsgEl=(0,a.default)("#"+n);this.okBtnEl=(0,a.default)("#"+r);this.typeAheadSearchInputEl=(0,a.default)("#"+t);this.followOnTaskDefnUuidOuputEl=(0,a.default)("#"+i);var l=(0,a.default)("#"+o);if(!this.notFoundMsgEl.length>0){throw new Error("Not found message element required")}if(!this.okBtnEl.length>0){throw new Error("Ok button element required")}if(!this.typeAheadSearchInputEl.length>0){throw new Error("Typeahead input element required")}if(!this.followOnTaskDefnUuidOuputEl.length>0){throw new Error("Output followOn task definition UUI input element required")}if(!l.length>0){throw new Error("REST api url element is required")}this.apiUrl=l.val();this.selectedOption="";this.typeAheadSearchInputEl.keydown(function(){setTimeout(function(){if(s.typeAheadSearchInputEl.val()!=s.selectedOption){s.disableOkBtn();s.clearSelectedTaskDefinition()}})});this.initialize=this.initialize.bind(this)}n(e,[{key:"setSelectedTaskDefinition",value:function e(t){if(t){this.typeAheadSearchInputEl.val(this.displayFollowOn(null,t));this.selectedOption=this.typeAheadSearchInputEl.val();this.followOnTaskDefnUuidOuputEl.attr("value",t.id)}}},{key:"clearSelectedTaskDefinition",value:function e(){this.followOnTaskDefnUuidOuputEl.attr("value","")}},{key:"initialize",value:function e(){var t=this;this.disableOkBtn();try{return u.default.getFollowOnTaskDefinitions(this.apiUrl).then(function(e){t.configureTypeAhead(e);t.typeAheadSearchInputEl.focus()})}catch(e){throw new Error("Error while trying to fetch task definitions.",e)}}},{key:"configureTypeAhead",value:function e(t){var r=this;var n=new s.default(t);a.default.each(n.data,function(e,t){t.displayValue=r.displayFollowOn(null,t)});a.default.typeahead({input:r.typeAheadSearchInputEl,highlight:true,name:n.name,limit:n.limit,minLength:n.minLength,display:["displayValue"],emptyTemplate:'<div class="mx-typeahead-msg-notfound">'+r.notFoundMsgEl.val()+"</div>",source:{data:n.data},callback:{onClick:function e(t,n,i,a){a.preventDefault();r.enableOkBtn();r.setSelectedTaskDefinition(i);this.hideLayout()}}})}},{key:"displayFollowOn",value:function e(t,r){if(r){return r.code+" - "+r.configSlotCode+" - "+r.name}}},{key:"enableOkBtn",value:function e(){if(this.okBtnEl){if(this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("onclick",this.okBtnEl.attr("originOnClickEvent"))}if(this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("title",this.okBtnEl.attr("originTitle"))}this.okBtnEl.removeClass("disabled");this.okBtnEl.removeAttr("disabled");this.okBtnEl.removeAttr("originOnClickEvent");this.okBtnEl.removeAttr("originTitle")}}},{key:"disableOkBtn",value:function e(){if(this.okBtnEl){if(!this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("originOnClickEvent",this.okBtnEl.attr("onclick"))}if(!this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("originTitle",this.okBtnEl.attr("title"))}this.okBtnEl.addClass("disabled");this.okBtnEl.attr("disabled","disabled");this.okBtnEl.attr("onclick",false);this.okBtnEl.attr("title","")}}}]);return e}();t.default=f},function(e,t,r){"use strict";(function(e){var t=r(9);var n=i(t);function i(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchController followOnTask/followOnTaskDefinitionSearchController.js",function(){var t="/someRestApi";function r(){return new n.default("followOnTaskSearchQuery","idButtonOk","idTypeaheadNotFoundMessage","idFieldFollowOnTaskDefnUuid","idfollowOnTaskDefinitionRestAPI")}function i(){setFixtures('<form id="form-typeahead-test" name="form-typeahead-test">'+'  <div class="typeahead__container">'+'     <div class="typeahead__field">'+'        <span class="typeahead__query">'+'          <input class= "js-typeahead-test" id="followOnTaskSearchQuery" name="followOnTaskSearchQuery">'+"        </span>"+"     </div>"+"  </div>"+'  <button id="idButtonOk" title="mytitle">Ok</button>'+'  <input type="hidden" name="aFollowOnTaskDefinitionUuid" id="idFieldFollowOnTaskDefnUuid">'+'  <input type="hidden" id="idTypeaheadNotFoundMessage" value="web.msg.MSG_NO_MATCHING_FOLLOWON_TASK_DEFINITIONS">'+'  <input type="hidden" id="idfollowOnTaskDefinitionRestAPI" value="'+t+'"'+"</form>")}beforeEach(function(){jasmine.Ajax.install();i();this.okButtonEl=e("#idButtonOk");this.fieldFollowOnTaskDefnUuidEl=e("#idFieldFollowOnTaskDefnUuid")});afterEach(function(){jasmine.Ajax.uninstall()});it("Should have a button with OK label",function(){expect(this.okButtonEl).toHaveText("Ok")});it("Should throw error indicating missing typeaheadId",function(){expect(function(){new n.default("FAKE_followOnTaskSearchQuery","FAKE_idButtonOk","FAKE_idTypeaheadNotFoundMessage","FAKE_idFieldFollowOnTaskDefnUuid","FAKE_idfollowOnTaskDefinitionRestAPI")}).toThrow()});it("Should have Ok button enabled",function(){var e=r();e.enableOkBtn();expect(this.okButtonEl).not.toHaveClass("disabled")});it("Should have Ok button disabled",function(){var e=r();e.disableOkBtn();expect(this.okButtonEl).toHaveClass("disabled")});it("returns a properly constructed display value",function(){var e=[{code:5,configSlotCode:3,name:"test"}];var t=r();expect(t.displayFollowOn(null,e[0])).toBe("5 - 3 - test")});it("Should set and clear selected task definition of output element",function(){var e=r();e.setSelectedTaskDefinition({id:"someValue"});expect(this.fieldFollowOnTaskDefnUuidEl.attr("value")).toBe("someValue");e.clearSelectedTaskDefinition();expect(this.fieldFollowOnTaskDefnUuidEl.attr("value")).toBe("")});it("Fetches task definitions successfully",function(n){var i=r();var a=[{id:"A6AAE18B638740B29B2F34D51CF2CCD5",configSlotCode:"BOM123",name:"ReqWithImpact1",code:"NC14992-REQ1"},{id:"A6AAE18B638740B29B2F34D51CF2CCD6",configSlotCode:"BOM123",name:"ReqWithImpact2",code:"NC14992-REQ2"},{id:"A6AAE18B638740B29B2F34D51CF2CCD7",configSlotCode:"BOM123",name:"ReqWithImpact3",code:"NC14992-REQ3"},{id:"A6AAE18B638740B29B2F34D51CF2CCD8",configSlotCode:"BOM123",name:"ReqWithImpact4",code:"NC14992-REQ4"},{id:"A6AAE18B638740B29B2F34D51CF2CCD9",configSlotCode:"BOM123",name:"ReqWithImpact5",code:"NC14992-REQ5"},{id:"A6AAE18B638740B29B2F34D51CF2CCE3",configSlotCode:"BOM123",name:"ReqWithImpact6",code:"NC14992-REQ6"}];spyOn(e,"ajax").and.callFake(function(e){return e.success(a)});var o=e("#idButtonOk");var s=e("#followOnTaskSearchQuery");i.initialize().then(function(){expect(e.ajax.calls.mostRecent().args[0].url).toEqual(t);expect(o).toHaveClass("disabled");expect(s).toBeFocused();n()})})})}).call(this,r(0))},function(e,t,r){"use strict";var n=r(4);var i=a(n);function a(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchConfig followOnTask/followOnTaskDefinitionSearchConfig.js",function(){it("throws exception on empty data parameter",function(){expect(function(){var e=new i.default}).toThrowError("The response data suppose to be in array form")});it("throws exception with a object type data parameter instead of array",function(){expect(function(){var e={};var t=new i.default(e)}).toThrowError("The response data suppose to be in array form")});it("creates a valid config object",function(){var e=[];var t=new i.default(e);expect(t.name).toBe("followOnTaskDefnSearch");expect(t.limit).toBe(50);expect(t.minLength).toBe(1)})})},function(e,t,r){"use strict";var n=r(0);var i=s(n);var a=r(1);var o=s(a);function s(e){return e&&e.__esModule?e:{default:e}}describe("TaskSupervisionService.js",function(){describe("getCrewsForUser",function(){var e=new o.default;var t="user";var r=function e(){};var n=function e(){};beforeEach(function(){jasmine.Ajax.install()});afterEach(function(){jasmine.Ajax.uninstall()});it("will call the success handler when the ajax call is successful",function(){spyOn(i.default,"ajax").and.callFake(function(e){e.success({})})})})})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();function i(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var a=function(){function e(){i(this,e)}n(e,null,[{key:"validateHours",value:function e(t){var r=t.split(".");if(r.length>0){if(r[0].length>4){return false}if(r.length==2){if(r[1].length>5){return false}}else if(r.length>2){return false}}return true}},{key:"validateDateFormat",value:function e(t){if(!t){throw new Error("dateStr is mandatory.")}if(typeof t!=="string"){throw new Error("dateStr is not a string")}var r=/^(([0-9])|([0-2][0-9])|([3][0-1]))\-(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\-\d{4}$/;var n=t.match(r);if(n==null){throw new Error("dateStr has invalid format.")}return true}},{key:"validateTimeFormat",value:function e(t){if(!t){throw new Error("timeStr is mandatory.")}if(typeof t!=="string"){throw new Error("timeStr is not a string.")}var r=/^$|^(([01][0-9])|(2[0-3])):[0-5][0-9]$/;var n=t.match(r);if(n==null){throw new Error("timeStr has invalid format.")}return true}}]);return e}();t.default=a},function(e,t){},function(e,t,r){"use strict";var n=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var i;i=function(){return this}();try{i=i||Function("return this")()||(1,eval)("this")}catch(e){if((typeof window==="undefined"?"undefined":n(window))==="object")i=window}e.exports=i},function(e,t,r){"use strict";var n=e.exports={};var i;var a;function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){i=setTimeout}else{i=o}}catch(e){i=o}try{if(typeof clearTimeout==="function"){a=clearTimeout}else{a=s}}catch(e){a=s}})();function l(e){if(i===setTimeout){return setTimeout(e,0)}if((i===o||!i)&&setTimeout){i=setTimeout;return setTimeout(e,0)}try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}function u(e){if(a===clearTimeout){return clearTimeout(e)}if((a===s||!a)&&clearTimeout){a=clearTimeout;return clearTimeout(e)}try{return a(e)}catch(t){try{return a.call(null,e)}catch(t){return a.call(this,e)}}}var d=[];var c=false;var f;var h=-1;function v(){if(!c||!f){return}c=false;if(f.length){d=f.concat(d)}else{h=-1}if(d.length){m()}}function m(){if(c){return}var e=l(v);c=true;var t=d.length;while(t){f=d;d=[];while(++h<t){if(f){f[h].run()}}h=-1;t=d.length}f=null;c=false;u(e)}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}d.push(new p(e,t));if(d.length===1&&!c){l(m)}};function p(e,t){this.fun=e;this.array=t}p.prototype.run=function(){this.fun.apply(null,this.array)};n.title="browser";n.browser=true;n.env={};n.argv=[];n.version="";n.versions={};function w(){}n.on=w;n.addListener=w;n.once=w;n.off=w;n.removeListener=w;n.removeAllListeners=w;n.emit=w;n.prependListener=w;n.prependOnceListener=w;n.listeners=function(e){return[]};n.binding=function(e){throw new Error("process.binding is not supported")};n.cwd=function(){return"/"};n.chdir=function(e){throw new Error("process.chdir is not supported")};n.umask=function(){return 0}},function(e,t,r){"use strict";(function(n,i){var a,o;var s;var l=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol==="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */
(function(n,i){(false?undefined:l(t))==="object"&&typeof e!=="undefined"?e.exports=i():true?!(a=i,o=typeof a==="function"?a.call(t,r,t,e):a,o!==undefined&&(e.exports=o)):undefined})(undefined,function(){"use strict";function e(e){return typeof e==="function"||(typeof e==="undefined"?"undefined":l(e))==="object"&&e!==null}function t(e){return typeof e==="function"}var a=undefined;if(!Array.isArray){a=function e(t){return Object.prototype.toString.call(t)==="[object Array]"}}else{a=Array.isArray}var o=a;var u=0;var d=undefined;var c=undefined;var f=function e(t,r){I[u]=t;I[u+1]=r;u+=2;if(u===2){if(c){c(D)}else{A()}}};function h(e){c=e}function v(e){f=e}var m=typeof window!=="undefined"?window:undefined;var p=m||{};var w=p.MutationObserver||p.WebKitMutationObserver;var y=typeof self==="undefined"&&typeof n!=="undefined"&&{}.toString.call(n)==="[object process]";var g=typeof Uint8ClampedArray!=="undefined"&&typeof importScripts!=="undefined"&&typeof MessageChannel!=="undefined";function E(){return function(){return n.nextTick(D)}}function T(){return function(){d(D)}}function k(){var e=0;var t=new w(D);var r=document.createTextNode("");t.observe(r,{characterData:true});return function(){r.data=e=++e%2}}function b(){var e=new MessageChannel;e.port1.onmessage=D;return function(){return e.port2.postMessage(0)}}function S(){var e=setTimeout;return function(){return e(D,1)}}var I=new Array(1e3);function D(){for(var e=0;e<u;e+=2){var t=I[e];var r=I[e+1];t(r);I[e]=undefined;I[e+1]=undefined}u=0}function F(){try{var e=s;var t=r(14);d=t.runOnLoop||t.runOnContext;return T()}catch(e){return S()}}var A=undefined;if(y){A=E()}else if(w){A=k()}else if(g){A=b()}else if(m===undefined&&"function"==="function"){A=F()}else{A=S()}function O(e,t){var r=arguments;var n=this;var i=new this.constructor(B);if(i[C]===undefined){ne(i)}var a=n._state;if(a){(function(){var e=r[a-1];f(function(){return X(a,i,e,n._result)})})()}else{Z(n,i,e,t)}return i}function _(e){var t=this;if(e&&(typeof e==="undefined"?"undefined":l(e))==="object"&&e.constructor===t){return e}var r=new t(B);J(r,e);return r}var C=Math.random().toString(36).substring(16);function B(){}var x=void 0;var M=1;var P=2;var j=new Q;function H(){return new TypeError("You cannot resolve a promise with itself")}function R(){return new TypeError("A promises callback cannot return that same promise.")}function W(e){try{return e.then}catch(e){j.error=e;return j}}function N(e,t,r,n){try{e.call(t,r,n)}catch(e){return e}}function U(e,t,r){f(function(e){var n=false;var i=N(r,t,function(r){if(n){return}n=true;if(t!==r){J(e,r)}else{G(e,r)}},function(t){if(n){return}n=true;Y(e,t)},"Settle: "+(e._label||" unknown promise"));if(!n&&i){n=true;Y(e,i)}},e)}function L(e,t){if(t._state===M){G(e,t._result)}else if(t._state===P){Y(e,t._result)}else{Z(t,undefined,function(t){return J(e,t)},function(t){return Y(e,t)})}}function $(e,r,n){if(r.constructor===e.constructor&&n===O&&r.constructor.resolve===_){L(e,r)}else{if(n===j){Y(e,j.error)}else if(n===undefined){G(e,r)}else if(t(n)){U(e,r,n)}else{G(e,r)}}}function J(t,r){if(t===r){Y(t,H())}else if(e(r)){$(t,r,W(r))}else{G(t,r)}}function q(e){if(e._onerror){e._onerror(e._result)}V(e)}function G(e,t){if(e._state!==x){return}e._result=t;e._state=M;if(e._subscribers.length!==0){f(V,e)}}function Y(e,t){if(e._state!==x){return}e._state=P;e._result=t;f(q,e)}function Z(e,t,r,n){var i=e._subscribers;var a=i.length;e._onerror=null;i[a]=t;i[a+M]=r;i[a+P]=n;if(a===0&&e._state){f(V,e)}}function V(e){var t=e._subscribers;var r=e._state;if(t.length===0){return}var n=undefined,i=undefined,a=e._result;for(var o=0;o<t.length;o+=3){n=t[o];i=t[o+r];if(n){X(r,n,i,a)}else{i(a)}}e._subscribers.length=0}function Q(){this.error=null}var z=new Q;function K(e,t){try{return e(t)}catch(e){z.error=e;return z}}function X(e,r,n,i){var a=t(n),o=undefined,s=undefined,l=undefined,u=undefined;if(a){o=K(n,i);if(o===z){u=true;s=o.error;o=null}else{l=true}if(r===o){Y(r,R());return}}else{o=i;l=true}if(r._state!==x){}else if(a&&l){J(r,o)}else if(u){Y(r,s)}else if(e===M){G(r,o)}else if(e===P){Y(r,o)}}function ee(e,t){try{t(function t(r){J(e,r)},function t(r){Y(e,r)})}catch(t){Y(e,t)}}var te=0;function re(){return te++}function ne(e){e[C]=te++;e._state=undefined;e._result=undefined;e._subscribers=[]}function ie(e,t){this._instanceConstructor=e;this.promise=new e(B);if(!this.promise[C]){ne(this.promise)}if(o(t)){this._input=t;this.length=t.length;this._remaining=t.length;this._result=new Array(this.length);if(this.length===0){G(this.promise,this._result)}else{this.length=this.length||0;this._enumerate();if(this._remaining===0){G(this.promise,this._result)}}}else{Y(this.promise,ae())}}function ae(){return new Error("Array Methods must be provided an Array")}ie.prototype._enumerate=function(){var e=this.length;var t=this._input;for(var r=0;this._state===x&&r<e;r++){this._eachEntry(t[r],r)}};ie.prototype._eachEntry=function(e,t){var r=this._instanceConstructor;var n=r.resolve;if(n===_){var i=W(e);if(i===O&&e._state!==x){this._settledAt(e._state,t,e._result)}else if(typeof i!=="function"){this._remaining--;this._result[t]=e}else if(r===ce){var a=new r(B);$(a,e,i);this._willSettleAt(a,t)}else{this._willSettleAt(new r(function(t){return t(e)}),t)}}else{this._willSettleAt(n(e),t)}};ie.prototype._settledAt=function(e,t,r){var n=this.promise;if(n._state===x){this._remaining--;if(e===P){Y(n,r)}else{this._result[t]=r}}if(this._remaining===0){G(n,this._result)}};ie.prototype._willSettleAt=function(e,t){var r=this;Z(e,undefined,function(e){return r._settledAt(M,t,e)},function(e){return r._settledAt(P,t,e)})};function oe(e){return new ie(this,e).promise}function se(e){var t=this;if(!o(e)){return new t(function(e,t){return t(new TypeError("You must pass an array to race."))})}else{return new t(function(r,n){var i=e.length;for(var a=0;a<i;a++){t.resolve(e[a]).then(r,n)}})}}function le(e){var t=this;var r=new t(B);Y(r,e);return r}function ue(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function de(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function ce(e){this[C]=re();this._result=this._state=undefined;this._subscribers=[];if(B!==e){typeof e!=="function"&&ue();this instanceof ce?ee(this,e):de()}}ce.all=oe;ce.race=se;ce.resolve=_;ce.reject=le;ce._setScheduler=h;ce._setAsap=v;ce._asap=f;ce.prototype={constructor:ce,then:O,catch:function e(t){return this.then(null,t)}};function fe(){var e=undefined;if(typeof i!=="undefined"){e=i}else if(typeof self!=="undefined"){e=self}else{try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}}var t=e.Promise;if(t){var r=null;try{r=Object.prototype.toString.call(t.resolve())}catch(e){}if(r==="[object Promise]"&&!t.cast){return}}e.Promise=ce}fe();ce.polyfill=fe;ce.Promise=ce;return ce})}).call(this,r(16),r(15))},function(e,t,r){"use strict";(function(e,n){Object.defineProperty(t,"__esModule",{value:true});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if("value"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}return function(t,r,n){if(r)e(t.prototype,r);if(n)e(t,n);return t}}();var a=r(1);var o=c(a);var s=r(13);var l=c(s);var u=r(5);var d=c(u);function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var h=function(){function t(e){f(this,t);this.userId=e.userId;if(!this.userId){throw new Error("userId is mandatory")}this.crewsFieldId=e.crewsFieldId;if(!this.crewsFieldId){throw new Error("crewsFieldId is mandatory")}var r=document.getElementById(this.crewsFieldId);if(!r||r.tagName!="SELECT"){throw new Error("crewsFieldId must be a SELECT element")}this.service=e.TaskSupervisionService||new o.default;this.isAllowedToSearch=e.isAllowedToSearch==="true";this.isAllowedToEditSchedledHours=e.isAllowedToEditSchedledHours==="true";this.isAllowedToEditActualHours=e.isAllowedToEditActualHours==="true";this.startDateWidgetId=e.startFieldId;this.endDateWidgetId=e.endFieldId;this.showCompleteId=e.showCompleteId;this.searchButtonId=e.searchButtonId;this.searchResultsId=e.searchResultsId;this.noSearchResultsMessage=e.noSearchResultsMessage;this.laborRowElaspedTimeThreshold=e.laborRowElaspedTimeThreshold;this.defaultShowComplete=true;this.isScheduledHoursCellEditable.bind(this);this.handleScheduleHoursEdit.bind(this);this.handleActualHoursEdit.bind(this);this.actualHourCellFormatter.bind(this)}i(t,[{key:"getServiceInstance",value:function e(){return this.service}},{key:"init",value:function t(){var r=this;return new e(function(t,n){r.initShowCompleteTasksWidget();r.initResultsTable();r.initSearchButton();e.all([r.initCrewsWidget(),r.initStartAndEndWidgets()]).then(function(e){r.populateCrewsWidget(e[0]);r.setStartAndEndWidgets(e[1]);r.performSearch().then(function(){return t()})}).catch(function(e){throw new Error(e)})})}},{key:"initCrewsWidget",value:function e(){return this.service.getCrewsForUser(this.userId)}},{key:"initStartAndEndWidgets",value:function e(){if(!this.userId){throw new Error("userId is mandatory")}try{this.validateStartEndWidgetIds();var t=this.buildFieldIdsForDateTimeWidget(this.startDateWidgetId);var r=this.buildFieldIdsForDateTimeWidget(this.endDateWidgetId);this.setStartEndElemAttrs(t,r);this.validateStartEndElems()}catch(e){console.error("initStartAndEndWidgets",e)}this.startDateElem.disabled=true;this.endDateElem.disabled=true;return this.service.getDefaultStartAndEndDates(this.userId)}},{key:"initShowCompleteTasksWidget",value:function e(){document.getElementById(this.showCompleteId).checked=this.defaultShowComplete}},{key:"initResultsTable",value:function e(){var t=this;var r=["technician","labourSkill","labourStatus","jobStopReason","elapsedHoursMinutes","scheduledHours","actualHours"];this.table=new Tabulator("#"+this.searchResultsId,{columns:[{title:"Task Id",field:"taskId",visible:false},{title:"Labour Row Id",field:"labourRowId",visible:false},{title:"From Job Stop",field:"isFromJobStop",visible:false},{title:"Line No",field:"lineNo",sorter:"number",align:"center"},{title:"Task",field:"taskName",sorter:"string",align:"center"},{title:"Task Status",field:"taskStatus",sorter:"string",align:"center"},{title:"Task Class - Subclass",field:"taskClassSubclass",sorter:"string",align:"center"},{title:"Task Priority",field:"taskPriority",sorter:"string",align:"center"},{title:"Aircraft",field:"aircraft",sorter:"string",align:"center"},{title:"Work Package",field:"workpackage",sorter:"string",align:"center"},{title:"Work Location",field:"workLocation",sorter:"string",align:"center"},{title:"Work Area",field:"workArea",sorter:"string",align:"center"},{title:"Scheduled Start Date",field:"scheduledStartDate",sorter:"string",align:"center"},{title:"Actual Start Date",field:"actualStartDate",sorter:"string",align:"center"},{field:"Selected",align:"center",width:50,headerSort:false,formatter:function e(){return'<input id="checkBox" type="checkbox">'}},{title:"Technician",field:"technician",sorter:"string",align:"center"},{title:"Skill",field:"labourSkill",sorter:"string",align:"center"},{title:"Labour Row Status",field:"labourStatus",sorter:"string",align:"center"},{title:"Job Stop Reason",field:"jobStopReason",sorter:"string",align:"center"},{title:"Elapsed Time",field:"elapsedHoursMinutes",sorter:"string",align:"center",formatter:this.isElapsedTimeGreaterThanThreshold.bind(this)},{title:"Sched. Hours",field:"scheduledHours",sorter:"string",align:"center",editor:"input",validator:["min: 0",this.validateHours],editable:this.isScheduledHoursCellEditable,cellEdited:this.handleScheduleHoursEdit},{title:"Actual Hours",field:"actualHours",sorter:"string",align:"center",editor:"input",validator:["min: 0",this.validateHours],editable:this.isActualHoursCellEditable,cellEdited:this.handleActualHoursEdit,formatter:this.actualHourCellFormatter}],dataSorted:function e(n,i){if(t.table){if(n.some(function(e){return r.indexOf(e.field)>=0})){t.table.setGroupBy()}else{t.table.setGroupBy("taskId")}}},groupHeader:function e(t,r,n,i){return n[0].taskName+"<span style='color:#000; margin-left:10px;'>("+r+" items)</span>"},groupToggleElement:"header",placeholder:this.noSearchResultsMessage})}},{key:"actualHourCellFormatter",value:function e(t){if(!t){return t}if(this.actualHourGreaterThanScheduledHours(t)){t.getElement().classList.add("highlightActualHoursCell")}var r=t.getValue();return r?r:""}},{key:"actualHourGreaterThanScheduledHours",value:function e(t){var r=t.getValue();if(!r){return r}var n=t.getRow().getData().scheduledHours;if(!n){return n}return parseInt(r)>parseInt(n)}},{key:"initSearchButton",value:function e(){var t=this;var r=n("#"+this.searchButtonId);if(this.isAllowedToSearch){r.show();r.click(function(e){e.preventDefault();t.performSearch()})}else{r.hide()}}},{key:"performSearch",value:function t(){var r=this;return new e(function(e,t){if(r.isAllowedToSearch){var n={crewId:document.getElementById(r.crewsFieldId).value,startDateTime:r.formatDateTime(r.startDateWidgetId),endDateTime:r.formatDateTime(r.endDateWidgetId),showCompleteTasks:document.getElementById(r.showCompleteId).checked};return r.service.performSearch(n).then(function(e){r.updateResultsTable(e)})}else{e()}})}},{key:"populateCrewsWidget",value:function e(t){n("#"+this.crewsFieldId).find("option").remove();t.sort(this.compareCrewAlphanumerically);if(t){var r=document.getElementById(this.crewsFieldId);var i=r.options;t.forEach(function(e,t){var r=document.createElement("option");r.text=e.label;r.value=e.id;i.add(r)});r.selectedIndex=0}}},{key:"compareCrewAlphanumerically",value:function e(t,r){if(t.label<r.label)return-1;if(t.label>r.label)return 1;return 0}},{key:"handleFailureToGetCrewsForUser",value:function e(t){throw new Error(t)}},{key:"validateStartEndWidgetIds",value:function e(){if(!this.startDateWidgetId){throw new Error("startFieldId is mandatory")}if(typeof this.startDateWidgetId!=="string"){throw new Error("startFieldId is not a string")}if(!this.endDateWidgetId){throw new Error("endFieldId is mandatory")}if(typeof this.endDateWidgetId!=="string"){throw new Error("endFieldId is not a string")}}},{key:"buildFieldIdsForDateTimeWidget",value:function e(t){return{dateFieldId:t+"_$DATE$",timeFieldId:t+"_$TIME$",timeZoneFieldId:t+"_$TIMEZONE_DISPLAY$",startPickerId:t+"_SelectBtn"}}},{key:"setStartEndElemAttrs",value:function e(t,r){this.startDateElem=document.getElementById(t.dateFieldId);this.startTimeElem=document.getElementById(t.timeFieldId);this.startTimeZoneElem=document.getElementById(t.timeZoneFieldId);this.startPickerElem=document.getElementById(t.startPickerId);this.endDateElem=document.getElementById(r.dateFieldId);this.endTimeElem=document.getElementById(r.timeFieldId);this.endTimeZoneElem=document.getElementById(r.timeZoneFieldId);this.endPickerElem=document.getElementById(r.startPickerId)}},{key:"validateStartEndElems",value:function e(){if(!this.startDateElem){throw new Error("start date field does not exist in the DOM.")}if(!this.startTimeElem){throw new Error("start time field does not exist in the DOM.")}if(!this.startTimeZoneElem){throw new Error("start time zone field does not exist in the DOM.")}if(!this.startPickerElem){throw new Error("start date picker field does not exist in the DOM.")}if(!this.endDateElem){throw new Error("end date field does not exist in the DOM.")}if(!this.endTimeElem){throw new Error("end time field does not exist in the DOM.")}if(!this.endTimeZoneElem){throw new Error("end time zone field does not exist in the DOM.")}if(!this.endPickerElem){throw new Error("end date picker field does not exist in the DOM.")}}},{key:"setStartAndEndWidgets",value:function e(t){this.startDateElem.value=t.startDate;this.startTimeElem.value=t.startTime;this.startTimeZoneElem.value=t.startTimeZone;this.endDateElem.value=t.endDate;this.endTimeElem.value=t.endTime;this.endTimeZoneElem.value=t.endTimeZone}},{key:"updateResultsTable",value:function e(t){var r=true;this.table.clearData();this.table.addData(t,r);this.table.setSort([{column:"lineNo",dir:"asc"}])}},{key:"formatDateTime",value:function e(t){var r=this.buildFieldIdsForDateTimeWidget(t);var n=document.getElementById(r.dateFieldId).value;var i=document.getElementById(r.timeFieldId).value;return n+" "+i}},{key:"isScheduledHoursCellEditable",value:function e(t){if(this.isAllowedToEditSchedledHours){var r=t.getRow().getData();if(r.isFromJobStop&&r.labourStatus=="ACTV"){return true}}return false}},{key:"isActualHoursCellEditable",value:function e(t){if(this.isAllowedToEditActualHours){var r=t.getRow().getData();if(r.labourStatus=="COMPLETE"){return true}}return false}},{key:"isElapsedTimeGreaterThanThreshold",value:function e(t){var r=t.getValue();if(r){var n=l.default.convertTimeToDecimal(r);if(n>parseFloat(this.laborRowElaspedTimeThreshold)){return"<span class='elapsedTimeExceedsThreshold'>"+r+"</span>"}}return r}},{key:"validateHours",value:function e(t,r){return l.default.validateHours(r)}},{key:"handleScheduleHoursEdit",value:function e(t){var r=t.getRow().getData();this.service.updateScheduledHours(r.taskId,r.labourRowId,t.getValue())}},{key:"handleActualHoursEdit",value:function e(t){var r=t.getRow().getData();this.service.updateActualHours(r.taskId,r.labourRowId,t.getValue())}}]);return t}();t.default=h}).call(this,r(2),r(0))},function(e,t,r){"use strict";(function(e){var t=r(18);var n=i(t);function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}describe("TaskSupervisionController",function(){describe("initCrewsWidget",function(){var t;var r=[{id:"1",code:"crew1",description:"crew one"},{id:"2",code:"crew2",description:"crew two"},{id:"3",code:"crew3",description:"crew three"}];var i=[{id:"1",code:"crew1",description:"crew one"}];var o=(t={startYear:"2019",startMonth:"01",startDayOfMonth:"01",startHourInDay:"12"},a(t,"startHourInDay","00"),a(t,"startMinute","00"),a(t,"endYear","2019"),a(t,"endMonth","02"),a(t,"endDayOfMonth","01"),a(t,"endHourInDay","12"),a(t,"endMinute","00"),a(t,"startTimezone","EST"),t);var s=void 0;var l=void 0;beforeEach(function(){jasmine.Ajax.install();this.validParms={userId:"userId",crewsFieldId:"crewsFieldId",startFieldId:"idStartDateTime",endFieldId:"idEndDateTime",showCompleteId:"idShowComplete",searchButtonId:"idSearchButton",searchResultsId:"idSearchResults",isAllowedToSearch:"true"};setFixtures('<select id="'+this.validParms.crewsFieldId+'"></select>'+'<input id="'+this.validParms.showCompleteId+'" type="checkbox"/>'+'<button id="'+this.validParms.searchButtonId+'" />'+'<div id="'+this.validParms.searchResultsId+'" />'+'<div id="'+this.validParms.startFieldId+'" />'+'<div id="'+this.validParms.startFieldId+'_$DATE$" />'+'<div id="'+this.validParms.startFieldId+'_$TIME$" />'+'<div id="'+this.validParms.startFieldId+'_$TIMEZONE_DISPLAY$" />'+'<div id="'+this.validParms.startFieldId+'_SelectBtn" />'+'<div id="'+this.validParms.endFieldId+'" />'+'<div id="'+this.validParms.endFieldId+'_$DATE$" />'+'<div id="'+this.validParms.endFieldId+'_$TIME$" />'+'<div id="'+this.validParms.endFieldId+'_$TIMEZONE_DISPLAY$" />'+'<div id="'+this.validParms.endFieldId+'_SelectBtn" />')});afterEach(function(){jasmine.Ajax.uninstall()});it("Throws error when user id not provided.",function(){var e=this.validParms;e.userId=undefined;expect(function(){var t=new n.default(e);t.initCrewsWidget()}).toThrowError("userId is mandatory")});it("Throws error when user id is blank.",function(){var e=this.validParms;e.userId=undefined;expect(function(){var t=new n.default(e)}).toThrowError("userId is mandatory")});it("Throws error when crew field id not provided.",function(){var e=this.validParms;e.crewsFieldId=undefined;expect(function(){var t=new n.default(e)}).toThrowError("crewsFieldId is mandatory")});it("Throws error when crew field id is blank.",function(){var e=this.validParms;e.crewsFieldId="";expect(function(){var t=new n.default(e)}).toThrowError("crewsFieldId is mandatory")});it("Throws error when crew field id does not identify a select element.",function(){var e=this.validParms;e.crewsFieldId="non-existing-id";expect(function(){var t=new n.default(e)}).toThrowError("crewsFieldId must be a SELECT element")});it("Throws error when crew field id identifies a non-select element.",function(){setFixtures('<input id="crewsFieldId"></input>');var e=this.validParms;e.crewsFieldId="crewsFieldId";expect(function(){var t=new n.default(e)}).toThrowError("crewsFieldId must be a SELECT element")});it("Fetch of crew list is returned",function(t){setFixtures('<select id="'+this.validParms.crewsFieldId+'"></select>');var i=new n.default(this.validParms);spyOn(e,"ajax").and.callFake(function(e){return e.success(r)});i.initCrewsWidget().then(function(e){expect(e).toBe(r);t()})});it("Populates Crew dropdown when provided list of crews.",function(t){this.validParms.isAllowedToSearch="false";var i=new n.default(this.validParms);spyOn(e,"ajax").and.callFake(function(e){if(e.url==="/maintenix/rest/crews"){return e.success(r)}else if(e.url==="/maintenix/rest/datetime/getCurrent"){return e.success(o)}else{console.warn("Unsupported url: ",e.url)}});var a=document.getElementById(this.validParms.crewsFieldId);var s=a.options;i.init().then(function(e){expect(s.length).toBe(r.length);t()})})})})}).call(this,r(0))},function(e,t,r){var n={"./basemaintenance/task/tasksupervision/TaskSupervisionController.spec.js":19,"./basemaintenance/task/tasksupervision/TaskSupervisionService.spec.js":12,"./engineering/requirementdefinition/followOnTask/followOnTaskDefinitionSearchConfig.spec.js":11,"./engineering/requirementdefinition/followOnTask/followOnTaskDefinitionSearchController.spec.js":10,"./engineering/requirementdefinition/followOnTask/followOnTaskDefinitionSearchService.spec.js":8,"./someFeature/featureMath/featureMath.spec.js":7};function i(e){var t=a(e);var n=r(t);return n}function a(e){var t=n[e];if(!(t+1)){var r=new Error('Cannot find module "'+e+'".');r.code="MODULE_NOT_FOUND";throw r}return t}i.keys=function e(){return Object.keys(n)};i.resolve=a;e.exports=i;i.id=20},function(e,t,r){"use strict";var n=r(20);n.keys().forEach(n)}],[[21,0]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,