(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[1],[function(e,t){e.exports=jQuery},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(e,i.key,i)}}return function(t,n,i){if(n)e(t.prototype,n);if(i)e(t,i);return t}}();var o=n(0);var a=r(o);function r(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var s=function(){function e(){l(this,e)}i(e,null,[{key:"sortTaskDefinitions",value:function e(t){if(!t||!(t instanceof Array)){throw new Error("taskDefinitions expected to be an Array")}return t.sort(function(e,t){var n=e.code>t.code?1:e.code<t.code?-1:0;if(n==0){n=e.configSlotCode>t.configSlotCode?1:e.configSlotCode<t.configSlotCode?-1:0}if(n==0){n=e.name>t.name?1:e.name<t.name?-1:0}return n})}},{key:"getFollowOnTaskDefinitions",value:function e(t){var n=this;return new Promise(function(e,i){return a.default.ajax({type:"GET",url:t,success:function t(i){var o=n.sortTaskDefinitions(i);e(o)},error:function t(n){e([])}})})}}]);return e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});function i(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var o=function e(t){i(this,e);if(!t||!(t instanceof Array)){throw new Error("The response data suppose to be in array form")}this.data=t;this.name="followOnTaskDefnSearch";this.limit=50;this.minLength=1};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=t.Add=function e(t,n){return t+n};var o=t.Subtract=function e(t,n){return t-n};var a=t.Multiply=function e(t,n){return t*n}},function(e,t,n){"use strict";var i=n(3);describe("[Dummy]",function(){it("[Add] should add two numbers together and return the result",function(){expect((0,i.Add)(1,2)).toBe(3)});it("[Subtract] should subtract second param from first and return the result",function(){expect((0,i.Subtract)(1,2)).toBe(-1)});it("[Multiply] should multiply two numbers and return the result",function(){expect((0,i.Multiply)(1,2)).toBe(2)})})},function(e,t,n){"use strict";(function(e){var t=n(1);var i=o(t);function o(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchService followOnTask/followOnTaskDefinitionSearchService.js",function(){var t=void 0;var n="https://www.google.com";var o=[{code:3,configSlotCode:3,name:"Third"},{code:2,configSlotCode:2,name:"Second"},{code:1,configSlotCode:1,name:"First"}];beforeAll(function(){this.service=i.default});it("Sorts task definitions",function(){var e=this.service.sortTaskDefinitions(o);expect(e[0].code).toBe(1);expect(e[1].code).toBe(2);expect(e[2].code).toBe(3)});it("Fetches task definitions with error for invalid response",function(){jasmine.Ajax.install();spyOn(e,"ajax").and.callFake(function(e){var t={};return e.success(t)});expect(function(){this.service.getFollowOnTaskDefinitions(n)}).toThrow();jasmine.Ajax.uninstall()});it("Fetches task definitions successfully",function(){jasmine.Ajax.install();spyOn(e,"ajax").and.callFake(function(e){return e.success(o)});this.service.getFollowOnTaskDefinitions(n).then(function(e){expect(e).toEqual(o)});jasmine.Ajax.uninstall()})})}).call(this,n(0))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(e,i.key,i)}}return function(t,n,i){if(n)e(t.prototype,n);if(i)e(t,i);return t}}();var o=n(0);var a=c(o);var r=n(2);var l=c(r);var s=n(1);var u=c(s);function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var d=function(){function e(t,n,i,o,r){f(this,e);var l=this;this.notFoundMsgEl=(0,a.default)("#"+i);this.okBtnEl=(0,a.default)("#"+n);this.typeAheadSearchInputEl=(0,a.default)("#"+t);this.followOnTaskDefnUuidOuputEl=(0,a.default)("#"+o);var s=(0,a.default)("#"+r);if(!this.notFoundMsgEl.length>0){throw new Error("Not found message element required")}if(!this.okBtnEl.length>0){throw new Error("Ok button element required")}if(!this.typeAheadSearchInputEl.length>0){throw new Error("Typeahead input element required")}if(!this.followOnTaskDefnUuidOuputEl.length>0){throw new Error("Output followOn task definition UUI input element required")}if(!s.length>0){throw new Error("REST api url element is required")}this.apiUrl=s.val();this.selectedOption="";this.typeAheadSearchInputEl.keydown(function(){setTimeout(function(){if(l.typeAheadSearchInputEl.val()!=l.selectedOption){l.disableOkBtn();l.clearSelectedTaskDefinition()}})});this.initialize=this.initialize.bind(this)}i(e,[{key:"setSelectedTaskDefinition",value:function e(t){if(t){this.typeAheadSearchInputEl.val(this.displayFollowOn(null,t));this.selectedOption=this.typeAheadSearchInputEl.val();this.followOnTaskDefnUuidOuputEl.attr("value",t.id)}}},{key:"clearSelectedTaskDefinition",value:function e(){this.followOnTaskDefnUuidOuputEl.attr("value","")}},{key:"initialize",value:function e(){var t=this;this.disableOkBtn();try{u.default.getFollowOnTaskDefinitions(this.apiUrl).then(function(e){return t.configureTypeAhead(e)});this.typeAheadSearchInputEl.focus()}catch(e){throw new Error("Error while trying to fetch task definitions.",e)}}},{key:"configureTypeAhead",value:function e(t){var n=this;var i=new l.default(t);a.default.each(i.data,function(e,t){t.displayValue=n.displayFollowOn(null,t)});a.default.typeahead({input:n.typeAheadSearchInputEl,highlight:true,name:i.name,limit:i.limit,minLength:i.minLength,display:["displayValue"],emptyTemplate:'<div class="mx-typeahead-msg-notfound">'+n.notFoundMsgEl.val()+"</div>",source:{data:i.data},callback:{onClick:function e(t,i,o,a){a.preventDefault();n.enableOkBtn();n.setSelectedTaskDefinition(o);this.hideLayout()}}})}},{key:"displayFollowOn",value:function e(t,n){if(n){return n.code+" - "+n.configSlotCode+" - "+n.name}}},{key:"enableOkBtn",value:function e(){if(this.okBtnEl){if(this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("onclick",this.okBtnEl.attr("originOnClickEvent"))}if(this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("title",this.okBtnEl.attr("originTitle"))}this.okBtnEl.removeClass("disabled");this.okBtnEl.removeAttr("disabled");this.okBtnEl.removeAttr("originOnClickEvent");this.okBtnEl.removeAttr("originTitle")}}},{key:"disableOkBtn",value:function e(){if(this.okBtnEl){if(!this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("originOnClickEvent",this.okBtnEl.attr("onclick"))}if(!this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("originTitle",this.okBtnEl.attr("title"))}this.okBtnEl.addClass("disabled");this.okBtnEl.attr("disabled","disabled");this.okBtnEl.attr("onclick",false);this.okBtnEl.attr("title","")}}}]);return e}();t.default=d},function(e,t,n){"use strict";(function(e){var t=n(6);var i=o(t);function o(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchController followOnTask/followOnTaskDefinitionSearchController.js",function(){var t="/someRestApi";function n(){return new i.default("followOnTaskSearchQuery","idButtonOk","idTypeaheadNotFoundMessage","idFieldFollowOnTaskDefnUuid","idfollowOnTaskDefinitionRestAPI")}function o(){setFixtures('<form id="form-typeahead-test" name="form-typeahead-test">'+'  <div class="typeahead__container">'+'     <div class="typeahead__field">'+'        <span class="typeahead__query">'+'          <input class= "js-typeahead-test" id="followOnTaskSearchQuery" name="followOnTaskSearchQuery">'+"        </span>"+"     </div>"+"  </div>"+'  <button id="idButtonOk" title="mytitle">Ok</button>'+'  <input type="hidden" name="aFollowOnTaskDefinitionUuid" id="idFieldFollowOnTaskDefnUuid">'+'  <input type="hidden" id="idTypeaheadNotFoundMessage" value="web.msg.MSG_NO_MATCHING_FOLLOWON_TASK_DEFINITIONS">'+'  <input type="hidden" id="idfollowOnTaskDefinitionRestAPI" value="'+t+'"'+"</form>")}beforeEach(function(){jasmine.Ajax.install();o();this.okButtonEl=e("#idButtonOk");this.fieldFollowOnTaskDefnUuidEl=e("#idFieldFollowOnTaskDefnUuid")});afterEach(function(){jasmine.Ajax.uninstall()});it("Should have a button with OK label",function(){expect(this.okButtonEl).toHaveText("Ok")});it("Should throw error indicating missing typeaheadId",function(){expect(function(){new i.default("FAKE_followOnTaskSearchQuery","FAKE_idButtonOk","FAKE_idTypeaheadNotFoundMessage","FAKE_idFieldFollowOnTaskDefnUuid","FAKE_idfollowOnTaskDefinitionRestAPI")}).toThrow()});it("Should have Ok button enabled",function(){var e=n();e.enableOkBtn();expect(this.okButtonEl).not.toHaveClass("disabled")});it("Should have Ok button disabled",function(){var e=n();e.disableOkBtn();expect(this.okButtonEl).toHaveClass("disabled")});it("returns a properly constructed display value",function(){var e=[{code:5,configSlotCode:3,name:"test"}];var t=n();expect(t.displayFollowOn(null,e[0])).toBe("5 - 3 - test")});it("Should set and clear selected task definition of output element",function(){var e=n();e.setSelectedTaskDefinition({id:"someValue"});expect(this.fieldFollowOnTaskDefnUuidEl.attr("value")).toBe("someValue");e.clearSelectedTaskDefinition();expect(this.fieldFollowOnTaskDefnUuidEl.attr("value")).toBe("")});it("Fetches task definitions successfully",function(){var i=n();var o=[{id:"A6AAE18B638740B29B2F34D51CF2CCD5",configSlotCode:"BOM123",name:"ReqWithImpact1",code:"NC14992-REQ1"},{id:"A6AAE18B638740B29B2F34D51CF2CCD6",configSlotCode:"BOM123",name:"ReqWithImpact2",code:"NC14992-REQ2"},{id:"A6AAE18B638740B29B2F34D51CF2CCD7",configSlotCode:"BOM123",name:"ReqWithImpact3",code:"NC14992-REQ3"},{id:"A6AAE18B638740B29B2F34D51CF2CCD8",configSlotCode:"BOM123",name:"ReqWithImpact4",code:"NC14992-REQ4"},{id:"A6AAE18B638740B29B2F34D51CF2CCD9",configSlotCode:"BOM123",name:"ReqWithImpact5",code:"NC14992-REQ5"},{id:"A6AAE18B638740B29B2F34D51CF2CCE3",configSlotCode:"BOM123",name:"ReqWithImpact6",code:"NC14992-REQ6"}];spyOn(e,"ajax").and.callFake(function(e){return e.success(o)});i.initialize();expect(e.ajax.calls.mostRecent().args[0].url).toEqual(t);var a=e("#idButtonOk");var r=e("#followOnTaskSearchQuery");spyOn(r,"focus");setTimeout(function(){expect(a).toHaveClass("disabled");expect(r.focus).toHaveBeenCalled()},100)})})}).call(this,n(0))},function(e,t,n){"use strict";var i=n(2);var o=a(i);function a(e){return e&&e.__esModule?e:{default:e}}describe("FollowOnTaskDefinitionSearchConfig followOnTask/followOnTaskDefinitionSearchConfig.js",function(){it("throws exception on empty data parameter",function(){expect(function(){var e=new o.default}).toThrowError("The response data suppose to be in array form")});it("throws exception with a object type data parameter instead of array",function(){expect(function(){var e={};var t=new o.default(e)}).toThrowError("The response data suppose to be in array form")});it("creates a valid config object",function(){var e=[];var t=new o.default(e);expect(t.name).toBe("followOnTaskDefnSearch");expect(t.limit).toBe(50);expect(t.minLength).toBe(1)})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(e,i.key,i)}}return function(t,n,i){if(n)e(t.prototype,n);if(i)e(t,i);return t}}();var o=n(0);var a=r(o);function r(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var s=function(){function e(){l(this,e)}i(e,[{key:"getCrewsForUser",value:function e(t){return new Promise(function(e,n){if(!t){throw new Error("userId is mandatory")}var i="/maintenix/rest/crew/list";var o={userId:t};a.default.ajax({url:i,type:"GET",data:o,success:function t(n,i,o){console.log("success: ",n);e(n)},error:function e(t,i,o){var a="Error code =  "+t.status;n(a)}})})}}]);return e}();t.default=s},function(e,t,n){"use strict";var i=n(0);var o=l(i);var a=n(9);var r=l(a);function l(e){return e&&e.__esModule?e:{default:e}}describe("TaskSupervisionService.js",function(){describe("getCrewsForUser",function(){var e=new r.default;var t="user";var n=function e(){};var i=function e(){};beforeEach(function(){jasmine.Ajax.install()});afterEach(function(){jasmine.Ajax.uninstall()});it("will call the success handler when the ajax call is successful",function(){spyOn(o.default,"ajax").and.callFake(function(e){e.success({})})})})})},function(e,t){throw new Error("Module build failed: SyntaxError: await is a reserved word (37:12)\n\n[0m [90m 35 | [39m         let controller [33m=[39m [36mnew[39m [33mTaskSupervisionController[39m(parms)[33m;[39m\n [90m 36 | [39m         expect([36mfunction[39m() {\n[31m[1m>[22m[39m[90m 37 | [39m            await controller[33m.[39minitCrewsWidget()[33m;[39m\n [90m    | [39m            [31m[1m^[22m[39m\n [90m 38 | [39m         })[33m.[39mtoThrowError([32m'userId is mandatory'[39m)[33m;[39m\n [90m 39 | [39m      })[33m;[39m\n [90m 40 | [39m[0m\n")},function(e,t,n){var i={"./basemaintenance/task/tasksupervision/TaskSupervisionController.initCrewsWidget.spec.js":11,"./basemaintenance/task/tasksupervision/TaskSupervisionService.spec.js":10,"./followOnTask/followOnTaskDefinitionSearchConfig.spec.js":8,"./followOnTask/followOnTaskDefinitionSearchController.spec.js":7,"./followOnTask/followOnTaskDefinitionSearchService.spec.js":5,"./someFeature/featureMath/featureMath.spec.js":4};function o(e){var t=a(e);var i=n(t);return i}function a(e){var t=i[e];if(!(t+1)){var n=new Error('Cannot find module "'+e+'".');n.code="MODULE_NOT_FOUND";throw n}return t}o.keys=function e(){return Object.keys(i)};o.resolve=a;e.exports=o;o.id=12},function(e,t,n){"use strict";var i=n(12);i.keys().forEach(i)}],[[13,0]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,