(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[3],[function(t,e){t.exports=jQuery},,,,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:true});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(t,i.key,i)}}return function(e,n,i){if(n)t(e.prototype,n);if(i)t(e,i);return e}}();var o=n(0);var a=r(o);function r(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e)){throw new TypeError("Cannot call a class as a function")}}var u=function(){function t(){l(this,t)}i(t,null,[{key:"sortTaskDefinitions",value:function t(e){if(!e||!(e instanceof Array)){throw new Error("taskDefinitions expected to be an Array")}return e.sort(function(t,e){var n=t.code>e.code?1:t.code<e.code?-1:0;if(n==0){n=t.configSlotCode>e.configSlotCode?1:t.configSlotCode<e.configSlotCode?-1:0}if(n==0){n=t.name>e.name?1:t.name<e.name?-1:0}return n})}},{key:"getFollowOnTaskDefinitions",value:function t(e){var n=this;return new Promise(function(t,i){return a.default.ajax({type:"GET",url:e,success:function e(i){var o=n.sortTaskDefinitions(i);t(o)},error:function e(n){t([])}})})}}]);return t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:true});function i(t,e){if(!(t instanceof e)){throw new TypeError("Cannot call a class as a function")}}var o=function t(e){i(this,t);if(!e||!(e instanceof Array)){throw new Error("The response data suppose to be in array form")}this.data=e;this.name="followOnTaskDefnSearch";this.limit=50;this.minLength=1};e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:true});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(t,i.key,i)}}return function(e,n,i){if(n)t(e.prototype,n);if(i)t(e,i);return e}}();var o=n(0);var a=f(o);var r=n(5);var l=f(r);var u=n(4);var s=f(u);function f(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e)){throw new TypeError("Cannot call a class as a function")}}var d=function(){function t(e,n,i,o,r){c(this,t);var l=this;this.notFoundMsgEl=(0,a.default)("#"+i);this.okBtnEl=(0,a.default)("#"+n);this.typeAheadSearchInputEl=(0,a.default)("#"+e);this.followOnTaskDefnUuidOuputEl=(0,a.default)("#"+o);var u=(0,a.default)("#"+r);if(!this.notFoundMsgEl.length>0){throw new Error("Not found message element required")}if(!this.okBtnEl.length>0){throw new Error("Ok button element required")}if(!this.typeAheadSearchInputEl.length>0){throw new Error("Typeahead input element required")}if(!this.followOnTaskDefnUuidOuputEl.length>0){throw new Error("Output followOn task definition UUI input element required")}if(!u.length>0){throw new Error("REST api url element is required")}this.apiUrl=u.val();this.selectedOption="";this.typeAheadSearchInputEl.keydown(function(){setTimeout(function(){if(l.typeAheadSearchInputEl.val()!=l.selectedOption){l.disableOkBtn();l.clearSelectedTaskDefinition()}})});this.initialize=this.initialize.bind(this)}i(t,[{key:"setSelectedTaskDefinition",value:function t(e){if(e){this.typeAheadSearchInputEl.val(this.displayFollowOn(null,e));this.selectedOption=this.typeAheadSearchInputEl.val();this.followOnTaskDefnUuidOuputEl.attr("value",e.id)}}},{key:"clearSelectedTaskDefinition",value:function t(){this.followOnTaskDefnUuidOuputEl.attr("value","")}},{key:"initialize",value:function t(){var e=this;this.disableOkBtn();try{s.default.getFollowOnTaskDefinitions(this.apiUrl).then(function(t){return e.configureTypeAhead(t)});this.typeAheadSearchInputEl.focus()}catch(t){throw new Error("Error while trying to fetch task definitions.",t)}}},{key:"configureTypeAhead",value:function t(e){var n=this;var i=new l.default(e);a.default.typeahead({input:n.typeAheadSearchInputEl,highlight:true,name:i.name,limit:i.limit,minLength:i.minLength,display:["code","configSlotCode","name"],emptyTemplate:'<div class="mx-typeahead-msg-notfound">'+n.notFoundMsgEl.val()+"</div>",template:n.displayFollowOn,source:{data:i.data},callback:{onClick:function t(e,i,o,a){a.preventDefault();n.enableOkBtn();n.setSelectedTaskDefinition(o);this.hideLayout()}}})}},{key:"displayFollowOn",value:function t(e,n){if(n){return n.code+" - "+n.configSlotCode+" - "+n.name}}},{key:"enableOkBtn",value:function t(){if(this.okBtnEl){if(this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("onclick",this.okBtnEl.attr("originOnClickEvent"))}if(this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("title",this.okBtnEl.attr("originTitle"))}this.okBtnEl.removeClass("disabled");this.okBtnEl.removeAttr("disabled");this.okBtnEl.removeAttr("originOnClickEvent");this.okBtnEl.removeAttr("originTitle")}}},{key:"disableOkBtn",value:function t(){if(this.okBtnEl){if(!this.okBtnEl.attr("originOnClickEvent")){this.okBtnEl.attr("originOnClickEvent",this.okBtnEl.attr("onclick"))}if(!this.okBtnEl.attr("originTitle")){this.okBtnEl.attr("originTitle",this.okBtnEl.attr("title"))}this.okBtnEl.addClass("disabled");this.okBtnEl.attr("disabled","disabled");this.okBtnEl.attr("onclick",false);this.okBtnEl.attr("title","")}}}]);return t}();e.default=d},function(t,e,n){"use strict";var i=n(6);var o=a(i);function a(t){return t&&t.__esModule?t:{default:t}}var r=new o.default("idInputTypeaheadFollowOnTaskSearch","idButtonOk","idTypeaheadNotFoundMessage","idFieldFollowOnTaskDefnUuid","idfollowOnTaskDefinitionRestAPI");r.initialize()}],[[7,0]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,